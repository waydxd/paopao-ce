// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.1.0

package v1

import (
	"net/http"

	"github.com/alimy/mir/v4"
	"github.com/gin-gonic/gin"
	"github.com/waydxd/paopao-ce/internal/model/web"
)

type Community interface {
	_default_

	// Chain provide handlers chain for gin
	Chain() gin.HandlersChain

	GetCommunityPost(*web.GetCommunityPostReq) (*web.GetCommunityPostResp, mir.Error)
	ListCommunityMembers(*web.ListCommunityMembersReq) (*web.ListCommunityMembersResp, mir.Error)
	LeaveCommunity(*web.JoinLeaveCommunityReq) mir.Error
	JoinCommunity(*web.JoinLeaveCommunityReq) mir.Error
	ListCommunities(*web.ListCommunitiesReq) (*web.ListCommunitiesResp, mir.Error)
	GetCommunity(*web.GetCommunityReq) (*web.GetCommunityResp, mir.Error)
	CreateCommunity(*web.CreateCommunityReq) (*web.CreateCommunityResp, mir.Error)

	mustEmbedUnimplementedCommunityServant()
}

// RegisterCommunityServant register Community servant to gin
func RegisterCommunityServant(e *gin.Engine, s Community) {
	router := e.Group("v1")
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	router.Handle("GET", "/community/posts", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetCommunityPostReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetCommunityPost(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/community/members", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.ListCommunityMembersReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.ListCommunityMembers(req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/community/leave", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.JoinLeaveCommunityReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.LeaveCommunity(req))
	})
	router.Handle("POST", "/community/join", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.JoinLeaveCommunityReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.JoinCommunity(req))
	})
	router.Handle("GET", "/community/list", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.ListCommunitiesReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.ListCommunities(req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/community/get", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.GetCommunityReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.GetCommunity(req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/community/create", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.CreateCommunityReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.CreateCommunity(req)
		s.Render(c, resp, err)
	})
}

// UnimplementedCommunityServant can be embedded to have forward compatible implementations.
type UnimplementedCommunityServant struct{}

func (UnimplementedCommunityServant) Chain() gin.HandlersChain {
	return nil
}

func (UnimplementedCommunityServant) GetCommunityPost(req *web.GetCommunityPostReq) (*web.GetCommunityPostResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCommunityServant) ListCommunityMembers(req *web.ListCommunityMembersReq) (*web.ListCommunityMembersResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCommunityServant) LeaveCommunity(req *web.JoinLeaveCommunityReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCommunityServant) JoinCommunity(req *web.JoinLeaveCommunityReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCommunityServant) ListCommunities(req *web.ListCommunitiesReq) (*web.ListCommunitiesResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCommunityServant) GetCommunity(req *web.GetCommunityReq) (*web.GetCommunityResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCommunityServant) CreateCommunity(req *web.CreateCommunityReq) (*web.CreateCommunityResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedCommunityServant) mustEmbedUnimplementedCommunityServant() {}
