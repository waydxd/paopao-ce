// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.1.0

package v1

import (
	"net/http"

	"github.com/alimy/mir/v4"
	"github.com/gin-gonic/gin"
	"github.com/waydxd/paopao-ce/internal/model/web"
)

type Report interface {
	_default_

	// Chain provide handlers chain for gin
	Chain() gin.HandlersChain

	UpdateReportStatus(*web.PatchReportReq) mir.Error
	ListReported() (*web.ListReportResp, mir.Error)
	DeleteReport(*web.DeleteReportReq) (*web.ReportResp, mir.Error)
	SendReport(*web.ReportReq) (*web.ReportResp, mir.Error)

	mustEmbedUnimplementedReportServant()
}

// RegisterReportServant register Report servant to gin
func RegisterReportServant(e *gin.Engine, s Report) {
	router := e.Group("v1")
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	router.Handle("PATCH", "/report", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.PatchReportReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.UpdateReportStatus(req))
	})
	router.Handle("GET", "/report/list", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}

		resp, err := s.ListReported()
		s.Render(c, resp, err)
	})
	router.Handle("DELETE", "/report", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.DeleteReportReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.DeleteReport(req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/report", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.ReportReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.SendReport(req)
		s.Render(c, resp, err)
	})
}

// UnimplementedReportServant can be embedded to have forward compatible implementations.
type UnimplementedReportServant struct{}

func (UnimplementedReportServant) Chain() gin.HandlersChain {
	return nil
}

func (UnimplementedReportServant) UpdateReportStatus(req *web.PatchReportReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedReportServant) ListReported() (*web.ListReportResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedReportServant) DeleteReport(req *web.DeleteReportReq) (*web.ReportResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedReportServant) SendReport(req *web.ReportReq) (*web.ReportResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedReportServant) mustEmbedUnimplementedReportServant() {}
